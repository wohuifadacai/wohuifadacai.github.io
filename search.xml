<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/21/hello-world/"/>
      <url>/2023/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派远程桌面共享VNC</title>
      <link href="/2023/10/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%85%B1%E4%BA%ABVNC/"/>
      <url>/2023/10/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%85%B1%E4%BA%ABVNC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GY39测量温湿度和光照强度用C51单片机实现</title>
      <link href="/2023/10/19/GY39%E6%B5%8B%E9%87%8F%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%92%8C%E5%85%89%E7%85%A7%E5%BC%BA%E5%BA%A6%E7%94%A8C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/10/19/GY39%E6%B5%8B%E9%87%8F%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%92%8C%E5%85%89%E7%85%A7%E5%BC%BA%E5%BA%A6%E7%94%A8C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、GY-39的介绍"><a href="#一、GY-39的介绍" class="headerlink" title="一、GY-39的介绍"></a>一、GY-39的介绍</h1><p>GY-39 是一款低成本，气压，温湿度，光强度传感器模块。工作电压 3-5v，功耗小，安装方便。其工作原理是， MCU 收集各种传感器数据，统一处理，直接输出计算后的结果。<br><img src="/2023/10/19/GY39%E6%B5%8B%E9%87%8F%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%92%8C%E5%85%89%E7%85%A7%E5%BC%BA%E5%BA%A6%E7%94%A8C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0/4e3e1b984cfd4d9f82daa150a1d5a34b.png" alt="GY-39模块"></p><p>在此模块中，有两种方式读取数据，即串口 UART（ TTL 电平）或者 IIC（ 2 线）。这里就是利用C51的串口采集GY-39的数据。</p><p><strong>通信协议</strong><br>串口通信参数可以有以下两种选择：<br>1、波特率： 9600 bps        校验位：  N 数据位： 8 停止位： 1<br>2、波特率： 115200 bps     校验位： N 数据位： 8 停止位： 1<br>我们将使用方式一，用9600的波特率   （如果是stm32可以使用方式二）</p><h2 id="GY39的命令数据帧格式"><a href="#GY39的命令数据帧格式" class="headerlink" title="GY39的命令数据帧格式"></a>GY39的命令数据帧格式</h2><p>GY39模块是以命令的方式发送数据的，简单来说就是当你发送一个指令，GY39就回复对应的数据给你，如：你发送取光照强度的指令，Gy39就回给你光照的数据。</p><p>GY-39模块的所有串口指令格式为：<br>帧头： 0xa5（固定的）<br>所以<strong>指令格式：帧头+指令+校验和(8bit)</strong><br><img src="/2023/10/19/GY39%E6%B5%8B%E9%87%8F%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%92%8C%E5%85%89%E7%85%A7%E5%BC%BA%E5%BA%A6%E7%94%A8C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0/866e37b05d924a27a2e3ca697ada1ccf.png" alt="指令的组成部分"><br>发送命令： 0xA5+0x81+0x26，表示连续输出光照强度，掉电后保存该设置，重新上电后将自动连续输出光照强度；<br>发送命令： 0xA5+0x82+0x27，表示连续输出温度、气压、湿度、海拔，掉电后保存该设置，重新上电后将自动连续输出；</p><h2 id="接收的数据帧格式"><a href="#接收的数据帧格式" class="headerlink" title="接收的数据帧格式"></a>接收的数据帧格式</h2><p>模块输出格式，<strong>每帧包含 8-13 个字节</strong>（十六进制）</p><blockquote><p>不是8位就是13位</p></blockquote><p>①.Byte0: 0x5A 帧头标志<br>②.Byte1: 0x5A 帧头标志<br>③.Byte2: 0x15 本帧数据类型（参考含义说明）<br>④.Byte3: 0x04 数据量<br>⑤.Byte4: 0x00<del>0xFF 数据前高 8 位<br>⑤.Byte5: 0x00</del>0xFF 数据前低 8 位<br>⑥.Byte6: 0x00<del>0xFF 数据后高 8 位<br>⑦.Byte7: 0x00</del>0xFF 数据后低 8 位<br>⑧.Byte8: 0x00~0xFF 校验和（前面数据累加和，仅留低 8 位）</p><p>其中不管是8为数据还是13位数据：<br>-前面两位都是0xA5<br>-第三位是数据类型<br>-第四位是该数据帧的数据位的长度<br>-最后一位是校验和（可以不用管）</p><p><strong>其中第三位和第四位最为重要</strong><br><em><strong>第三位</strong></em><br><img src="/2023/10/19/GY39%E6%B5%8B%E9%87%8F%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%92%8C%E5%85%89%E7%85%A7%E5%BC%BA%E5%BA%A6%E7%94%A8C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0/fd162128f8564ef28a7deb1939bac0f3.png" alt="第三位的格式"><br><strong>当第三位的数据位为 “0X15” 表示这个数据帧为带有光照数据的数据帧<br>当第三位的数据位为 “0X45” 表示这个数据帧为温度、气压、湿度、海拔数据的数据帧</strong></p><p><em><strong>第四位数据</strong></em><br>表示该数据帧的数据位的大小<br>如：0x04 表示后面4个位都是数据位</p><h3 id="光照值的计算"><a href="#光照值的计算" class="headerlink" title="光照值的计算"></a>光照值的计算</h3><p><strong>光照强度计算方法</strong>（当 Byte2&#x3D;0x15 时,数据:Byte4~Byte7） ：<br>                Lux&#x3D;(前高 8 位&lt;&lt;24) | (前低 8 位&lt;&lt;16) | (后高 8 位&lt;&lt;8) | 后低 8 位 单位 lux</p><p>例：一帧数据<br>&lt;5A- 5A- 15 -04- 00 -00- FE- 40- 0B &gt;<br>           Lux&#x3D;(0x00&lt;&lt;24)|(0x00&lt;&lt;16)|(0xFE&lt;&lt;8)|0x40<br>           Lux&#x3D;Lux&#x2F;100 &#x3D;650.88 (lux)</p><h3 id="温度、气压、湿度、海拔数据的计算"><a href="#温度、气压、湿度、海拔数据的计算" class="headerlink" title="温度、气压、湿度、海拔数据的计算"></a>温度、气压、湿度、海拔数据的计算</h3><p>温度、气压、湿度、海拔，计算方法（当 Byte2&#x3D;0x45 时）：</p><p>温度： Byte4<del>Byte5<br>        T&#x3D;(高 8 位&lt;&lt;8)|低 8 位<br>        T&#x3D;T&#x2F;100 单位℃<br>气压： Byte6</del>Byte9<br>        P&#x3D;(前高 8 位&lt;&lt;24) | (前低 8 位&lt;&lt;16) | (后高 8 位&lt;&lt;8) | 后低 8 位<br>        P&#x3D;P&#x2F;100 单位 pa<br>湿度： Byte10<del>Byte11<br>        Hum&#x3D;(高 8 位&lt;&lt;8)|低 8 位<br>        Hum&#x3D;Hum&#x2F;100 百分制<br>海拔： Byte12</del>Byte134<br>        H&#x3D;(高 8 位&lt;&lt;8)|低 8 位 单位 m</p><p>例：一帧数据<br>&lt; 5A -5A -45 -0A -0B -2D -00 -97 -C4 -3F -12- 77 -00- 9C- FA &gt;<br>        T&#x3D;(0x0B&lt;&lt;8)|0x2D&#x3D;2861<br>        温度 T&#x3D;2861&#x2F;100&#x3D;28.61 (℃ )<br>        P&#x3D;(0x00&lt;&lt;24)|(0x97&lt;&lt;16)|(C4&lt;&lt;8)|3F&#x3D;9946175<br>        气压 P&#x3D;9946175&#x2F;100&#x3D;99461.75 (pa)<br>        Hum&#x3D;(0x12&lt;&lt;8)| 77&#x3D;4727<br>        湿度 Hum&#x3D;4727&#x2F;100&#x3D;47.27 (%)<br>        海拔 H&#x3D;(0x00&lt;&lt;8)|0x9c&#x3D;156 (m)</p><h1 id="二、利用C51计算光照、温度、湿度值"><a href="#二、利用C51计算光照、温度、湿度值" class="headerlink" title="二、利用C51计算光照、温度、湿度值"></a>二、利用C51计算光照、温度、湿度值</h1><p>接线：<br>TXD -&gt; DR<br>RXD -&gt; CT<br>如图：<br><img src="/2023/10/19/GY39%E6%B5%8B%E9%87%8F%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%92%8C%E5%85%89%E7%85%A7%E5%BC%BA%E5%BA%A6%E7%94%A8C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0/f9b7191b4b934032aec32cd57e8430e4.png" alt="接线图"></p><p>因为GY-39是要单片机不断发送命令，才会读取数据发送给我们的51单片机所以我们以采取轮询的方式，不断给单片机发送我们的命令数据帧，这样我们就可以实现一直获取数据。</p><p>我们的主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//=====================处理光照强度======================</span></span><br><span class="line">        send_buff(buff1,<span class="number">2</span>);</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">   <span class="keyword">if</span>(Receive_ok==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Lux = (raw_data[<span class="number">4</span>]&lt;&lt;<span class="number">24</span>)|(raw_data[<span class="number">5</span>]&lt;&lt;<span class="number">16</span>)|(raw_data[<span class="number">6</span>]&lt;&lt;<span class="number">8</span>)|raw_data[<span class="number">7</span>];</span><br><span class="line">            LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;Lux:&quot;</span>);</span><br><span class="line">            LCD_ShowNum(<span class="number">2</span>,<span class="number">5</span>,Lux/<span class="number">100</span>,<span class="number">3</span>);</span><br><span class="line">            LCD_ShowString(<span class="number">2</span>,<span class="number">8</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            LCD_ShowNum(<span class="number">2</span>,<span class="number">9</span>,Lux%<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line">            Receive_ok = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//================处理温度、湿度=========================</span></span><br><span class="line">        send_buff(buff1,<span class="number">3</span>);    </span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(Receive_ok==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">HUM = (raw_data[<span class="number">10</span>]&lt;&lt;<span class="number">8</span>)|raw_data[<span class="number">11</span>];</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;HU:&quot;</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">4</span>,HUM/<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">6</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">7</span>,HUM%<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line">TE =(raw_data[<span class="number">4</span>]&lt;&lt;<span class="number">8</span>)|raw_data[<span class="number">5</span>];</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">9</span>,<span class="string">&quot;TE:&quot;</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">12</span>,TE/<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">14</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">15</span>,TE%<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line">            Receive_ok = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        delay_ms(<span class="number">500</span>);<span class="comment">// 给个延时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C51发送命令数据给GY-39</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">send_buff</span><span class="params">(u8 *tem_buff,u8 buff_size)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;buff_size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SBUF = tem_buff[i];</span><br><span class="line">        <span class="keyword">while</span>(TI==<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">TI = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>串口中断函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">USART_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>interrupt 4</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> i=<span class="number">0</span>,rebuf[<span class="number">15</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(RI)<span class="comment">//接收完成标志</span></span><br><span class="line">&#123;</span><br><span class="line">rebuf[i++]=SBUF;</span><br><span class="line">        RI=<span class="number">0</span>;<span class="comment">//清中断接收标志</span></span><br><span class="line"><span class="keyword">if</span> (rebuf[<span class="number">0</span>]!=<span class="number">0x5a</span>)<span class="comment">//帧头不对</span></span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ((i==<span class="number">2</span>)&amp;&amp;(rebuf[<span class="number">1</span>]!=<span class="number">0x5a</span>))<span class="comment">//帧头不对</span></span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">3</span>)<span class="comment">//i等于4时，已经接收到数据量字节rebuf[3]</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i!=(rebuf[<span class="number">3</span>]+<span class="number">5</span>))<span class="comment">//判断是否接收一帧数据完毕</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">switch</span>(rebuf[<span class="number">2</span>])<span class="comment">//接收完毕后处理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x45</span>:</span><br><span class="line"><span class="keyword">if</span>(!Receive_ok)<span class="comment">//当数据处理完成后才接收新的数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(raw_data,rebuf,<span class="number">15</span>);<span class="comment">//拷贝接收到的数据</span></span><br><span class="line">Receive_ok=<span class="number">1</span>;<span class="comment">//接收完成标志</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x15</span>:</span><br><span class="line">            <span class="keyword">if</span>(!Receive_ok)<span class="comment">//当数据处理完成后才接收新的数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(raw_data,rebuf,<span class="number">9</span>);<span class="comment">//拷贝接收到的数据</span></span><br><span class="line">Receive_ok=<span class="number">2</span>;<span class="comment">//接收完成标志</span></span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//原始数据接收，可模仿0x45的方式</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x35</span>:<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=<span class="number">0</span>;<span class="comment">//缓存清0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、实验结果"><a href="#三、实验结果" class="headerlink" title="三、实验结果"></a>三、实验结果</h1><p><img src="/2023/10/19/GY39%E6%B5%8B%E9%87%8F%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%92%8C%E5%85%89%E7%85%A7%E5%BC%BA%E5%BA%A6%E7%94%A8C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0/51b85abfe7dc421ebf06ebbd2f781aed.jpeg" alt="实验结果"></p><h1 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h1><p> <a href="https://download.csdn.net/download/weixin_51593470/87801935">代码点这里下载链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F407的串口接收不定长数据两种方式HAL库</title>
      <link href="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/"/>
      <url>/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>STM32的串口接收不定长数据，最近在看超子说物联网，感觉太麻烦了不适合直接上手，然后我自己总结了两种方法：<br>1、不利用DMA<br>2、利用DMA方式</p><h2 id="整体架构流程"><a href="#整体架构流程" class="headerlink" title="整体架构流程"></a>整体架构流程</h2><p> 这个HAL整起来是方便，但是HAL整体来说对于细节很到位就是逻辑很强逻辑，也就很繁琐，效率又不高，还缺胳膊少腿的。好用，就比如说这个串口接收，没有专门的方法调用。搞的就很麻烦，我第一次接触就是这感觉哈，大佬除外。</p><p>然后我看到超子说物联网可以用这个<strong>串口的空闲中断</strong>来搞这个串口的不定长接收。</p><p><strong>大致的原理是：在接收每一段数据帧之后就会放开这个串口，产生了这个串口的空闲中断（IDLE），然后我们可以捕捉这个UART_FLAG_IDLE这个标志位，然后这个标志位被置位了，我们就可以说这段数据被接收完成了。</strong></p><p>我们使用STM32F407给大家做一下，大概流程</p><h2 id="不用DMA的方式"><a href="#不用DMA的方式" class="headerlink" title="不用DMA的方式"></a>不用DMA的方式</h2><p>先选择SYS<br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/1e5e4bf7ebce4860b550b6f4cd1715a8.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/f8c6b54d0ee94344a76d6f18027e1ea8.png" alt="在这里插入图片描述"></p><p>使能串口1<br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/2e5c8f1d20184f34b7efc6628a18c6c3.png" alt="在这里插入图片描述"><br>开启中断<br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/2f1ac9fb8e764f1bb6057dae6720e1c3.png" alt="在这里插入图片描述"><br>配置时钟<br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/ebbe9d30f54343baba4cf9522409c46d.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/d74e5ad4ec1e47dab96885a2a47f0510.png" alt="在这里插入图片描述"><br>生成工程<br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/20499b9c606c4f4ba6c30e13dccc9e83.png" alt="在这里插入图片描述"><br>进入代码打开usart.c的MX_USART1_UART_Init这个函数在后面加上开启中断的代码</p><p>开启串口接收和串口的空闲中断之后就是一直等待 ，等待串口接收到数据，一旦接收数据就触发串口中断进入USART1_IRQHandler函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_USART1_UART_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 0 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 0 */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 1 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 1 */</span></span><br><span class="line">  huart1.Instance = USART1;</span><br><span class="line">  huart1.Init.BaudRate = <span class="number">115200</span>;</span><br><span class="line">  huart1.Init.WordLength = UART_WORDLENGTH_8B;</span><br><span class="line">  huart1.Init.StopBits = UART_STOPBITS_1;</span><br><span class="line">  huart1.Init.Parity = UART_PARITY_NONE;</span><br><span class="line">  huart1.Init.Mode = UART_MODE_TX_RX;</span><br><span class="line">  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;</span><br><span class="line">  huart1.Init.OverSampling = UART_OVERSAMPLING_16;</span><br><span class="line">  <span class="keyword">if</span> (HAL_UART_Init(&amp;huart1) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 2 */</span></span><br><span class="line">  __HAL_UART_ENABLE_IT(&amp;huart1,UART_IT_RXNE);    <span class="comment">// 开启接收中断</span></span><br><span class="line">  __HAL_UART_ENABLE_IT(&amp;huart1,UART_IT_IDLE);      <span class="comment">// 开启串口的空闲中断</span></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 2 */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在stm32f4xx_it.c中,分别判断是否是接收中断还是空闲中断，如果是接收中断调用HAL_UART_Receive去接收一个数组，当一个数据帧接受完，就触发了空闲中断，以为串口接不到数据了，就直接放开串口，进入空闲中断后操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="type">uint8_t</span> rx_buffer[<span class="number">100</span>];<span class="comment">//接收数组</span></span><br><span class="line"><span class="type">uint8_t</span> rx_len = <span class="number">0</span>; <span class="comment">//接收到的数据长度</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief This function handles USART1 global interrupt.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 0 */</span></span><br><span class="line">  <span class="type">uint8_t</span> res;</span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 0 */</span></span><br><span class="line">  HAL_UART_IRQHandler(&amp;huart1);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 1 */</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_RXNE) != RESET)   <span class="comment">// 接收中断的标志位</span></span><br><span class="line">  &#123;</span><br><span class="line">    HAL_UART_Receive(&amp;huart1,&amp;res,<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span>(rx_len&gt;=<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rx_len = <span class="number">0</span>;    <span class="comment">//防止串口被刷爆  就是防止越界</span></span><br><span class="line">    &#125;</span><br><span class="line">    rx_buffer[rx_len++] = res;</span><br><span class="line">    __HAL_UART_CLEAR_FLAG(&amp;huart1,UART_FLAG_RXNE);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_IDLE) != RESET)    <span class="comment">// 空闲中断的标志位</span></span><br><span class="line">  &#123;</span><br><span class="line">    HAL_UART_Transmit(&amp;huart1,rx_buffer,rx_len,<span class="number">1000</span>);</span><br><span class="line">    rx_len = <span class="number">0</span>;</span><br><span class="line">    __HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);      <span class="comment">// 清除空闲中断的标志位</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/211d2682b04a4d99b916abc67c5c2db9.png" alt="在这里插入图片描述"></p><h2 id="使用DMA方式"><a href="#使用DMA方式" class="headerlink" title="使用DMA方式"></a>使用DMA方式</h2><p>在创建工程的时候方法一样只需要在</p><p><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/c2212c3affbb47b9b72732d1fa2b618c.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/613957fea771412380ccf72ddaaddd57.png" alt="在这里插入图片描述"><br>还是在usart.c的MX_USART1_UART_Init这个函数在后面加上开启中断的代码，开启DMA的接收</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_USART1_UART_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 1 */</span></span><br><span class="line">  huart1.Instance = USART1;</span><br><span class="line">  huart1.Init.BaudRate = <span class="number">115200</span>;</span><br><span class="line">  huart1.Init.WordLength = UART_WORDLENGTH_8B;</span><br><span class="line">  huart1.Init.StopBits = UART_STOPBITS_1;</span><br><span class="line">  huart1.Init.Parity = UART_PARITY_NONE;</span><br><span class="line">  huart1.Init.Mode = UART_MODE_TX_RX;</span><br><span class="line">  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;</span><br><span class="line">  huart1.Init.OverSampling = UART_OVERSAMPLING_16;</span><br><span class="line">  <span class="keyword">if</span> (HAL_UART_Init(&amp;huart1) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 2 */</span></span><br><span class="line">  HAL_UART_Receive_DMA(&amp;huart1,rx_buffer,<span class="number">100</span>);    <span class="comment">// 开启DMA接收</span></span><br><span class="line">  __HAL_UART_ENABLE_IT(&amp;huart1,UART_IT_IDLE);      <span class="comment">// 开启串口的空闲中断</span></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 2 */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入中断函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100</span></span><br><span class="line"><span class="type">uint8_t</span> rx_buffer[MAX];<span class="comment">//接收数组</span></span><br><span class="line"><span class="type">uint8_t</span> rx_len = <span class="number">0</span>; <span class="comment">//接收到的数据长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 0 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 0 */</span></span><br><span class="line">  HAL_UART_IRQHandler(&amp;huart1);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_IDLE) != RESET)    <span class="comment">// 空闲中断的标志位</span></span><br><span class="line">  &#123;</span><br><span class="line">    HAL_UART_DMAStop(&amp;huart1);                               <span class="comment">//停止接收</span></span><br><span class="line">    rx_len = MAX - __HAL_DMA_GET_COUNTER(&amp;hdma_usart1_rx);    <span class="comment">// 计算接收的数据长度</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart1,rx_buffer,rx_len,<span class="number">1000</span>);</span><br><span class="line">    HAL_UART_Receive_DMA(&amp;huart1,rx_buffer,<span class="number">100</span>);         <span class="comment">// 开启DMA继续接收</span></span><br><span class="line">    __HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/19/STM32F407%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%95%B0%E6%8D%AE%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FHAL%E5%BA%93/5d1be5b2e8e141289a9db02cb5804ffc.png" alt="在这里插入图片描述"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简单来说，就是利用接收数据后，数据的空闲时间来做有些事情把这些数据保存起来。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接阿里云（最详细+可移植）教程</title>
      <link href="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/"/>
      <url>/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>STM32F103c8t6+ESP8266（esp-01s）+MQTT固件 连接阿里云<br>里面用到了对串口不定长的数据的DMA+中断的接受方式。不了解的可以看这个篇文章<a href="https://blog.csdn.net/weixin_51593470/article/details/130886157">STM32F407的串口接收不定长数据两种方式HAL库</a><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/e9540ccae1d6427984f5179ada1e162b.png" alt="在这里插入图片描述"></p><h2 id="一、MQTT固件"><a href="#一、MQTT固件" class="headerlink" title="一、MQTT固件"></a>一、MQTT固件</h2><p>对于该项目我们利用了MQTT固件，这个固件可以让我们更加简单的利用MQTT进行数据传输，利用该固件我们不需要对MQTT进行封装，直接用。<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/86b18718e99d4b11aebeec497e754662.jpeg" alt="esp-01s"><br>我们可以去安信可的官网下载MQTT的固件（<a href="https://docs.ai-thinker.com/%E5%9B%BA%E4%BB%B6%E6%B1%87%E6%80%BB">安信可官网固件下载</a>）<br><strong>在安信可的官网上下载的固件还需要下载下载进esp8266的工具。如果这个有对应的下载工具。也有mqtt的固件</strong><br>链接：<a href="https://pan.baidu.com/s/1gbizlkm997HnCW5H3B7n3A">https://pan.baidu.com/s/1gbizlkm997HnCW5H3B7n3A</a><br>提取码：8ex1<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/6b3bac52117a4bcc83ebf791ab4ff20d.png" alt="在这里插入图片描述"><br>我尝试了一下1471这个固件号的是可以用的，其他的好像型号不对flash大小不够，有专业的可以给我讲解一下，谢谢。</p><p>下载的方式是利用串口，可以用wifi的转接板或者别的串口工具。我这边用的时转接板。<img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/85ac4613c8054da7bbb471a75394737c.jpeg" alt="请添加图片描述"><br>插上之后选择esp8266下载工具<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/980f70c656e14a4d9d078a470dad3429.png" alt="在这里插入图片描述"><br>进入之后根据下图进行操作<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/f1cb7fcc545241b28b16f3585acfb24e.png" alt="在这里插入图片描述"><br>MQTT固件连接阿里云对比AT固件连接云平台来说是更加简单，我们只需要掌握MQTT固件的AT指令就行。<br>我这里将列出几个关键的指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：</span></span><br><span class="line"><span class="comment">//&quot;AT+CWJAP=\&quot;WIFI名称\&quot;,\&quot;WiFi密码\&quot;\r\n&quot;;//连接热点AT指令</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//接入阿里云的AT指令</span></span><br><span class="line"><span class="comment">// 设置用户名和密码</span></span><br><span class="line">AT+MQTTUSERCFG=<span class="number">0</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;用户名&quot;</span>,<span class="string">&quot;密码&quot;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//绑定ClienId</span></span><br><span class="line">AT+MQTTCLIENTID=<span class="number">0</span>,<span class="string">&quot;ix25oHiHCSl.stm32|securemode=2\,signmethod=hmacsha156\,timestamp=1686921535251|&quot;</span></span><br><span class="line"><span class="comment">// 连接网址</span></span><br><span class="line">AT+MQTTCONN=<span class="number">0</span>,<span class="string">&quot;iot-06z00b28nanp9ew.mqtt.iothub.aliyuncs.com&quot;</span>,<span class="number">1883</span>,<span class="number">1</span></span><br><span class="line"><span class="comment">//发送数据格式</span></span><br><span class="line">AT+MQTTPUB=<span class="number">0</span>,<span class="string">&quot;/sys/ix25oHiHCSl/stm32/thing/event/property/post&quot;</span>,<span class="string">&quot;&#123;\&quot;params\&quot;:&#123;\&quot;temperature\&quot;:89\,\&quot;humi\&quot;:0\&#125;\,\&quot;version\&quot;:\&quot;1.0.0\&quot;&#125;&quot;</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line">+MQTTSUBRECV:<span class="number">0</span>,<span class="string">&quot;/sys/ix25oHiHCSl/stm32/thing/event/property/post&quot;</span>,<span class="number">75</span>,&#123;<span class="string">&quot;params&quot;</span>:&#123;<span class="string">&quot;temperature&quot;</span>:<span class="number">16.300000</span>,<span class="string">&quot;Humidity&quot;</span>:<span class="number">38.600000</span>&#125;,<span class="string">&quot;version&quot;</span>:<span class="string">&quot;1.0.0&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="二、阿里云账号注册"><a href="#二、阿里云账号注册" class="headerlink" title="二、阿里云账号注册"></a>二、阿里云账号注册</h2><p>注册自己的账号之后，进入<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/84969098db654eb6b1d6c0e67ab4bb1a.png" alt="在这里插入图片描述"></p><p><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/6120cebda0ce49cc88d33c961f381975.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/0dd89241538f4c36908a0acd36783a51.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/c4d7f4b3682f4a7e8266d3d69dc6194b.png" alt="在这里插入图片描述"><br>然后添加设备<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/d7c7326de7054c96a0c118b6a0da2561.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/ab9915c954744b1aa6da5dad2ba428ed.png" alt="在这里插入图片描述"><br><strong>这个mqtt连接参数十分重要，是stm32连接的关键</strong></p><p>添加物模型数据<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/1a61c9ae8761475f9ac1c5f4bd55d486.png" alt="在这里插入图片描述"><br>这里添加自己的想要的数据，这个很关键。添加成功之后可以在这里看到<img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/a99afda050b64252aa509409bf0d2a79.png" alt="在这里插入图片描述"><br>刚开始的数值为0或者为空</p><h2 id="三、stm32f103的配置"><a href="#三、stm32f103的配置" class="headerlink" title="三、stm32f103的配置"></a>三、stm32f103的配置</h2><p>1、选择对应芯片，这里使用的是stm32f103c8t6，配置一些下载、时钟<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/97df73a1898d47fb92567e763d8a75ed.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/1522b0f440a048909ebf5f9e45ce550b.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/35a91406507b407eae109c2a66ed4c5b.png" alt="在这里插入图片描述"><br>使用系统帮我们配置的时钟<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/d3ffcd0a5308454cbb3ce5bda7bae48d.png" alt="在这里插入图片描述"></p><p>2、初始化串口，串口1作为调试打印的串口，串口2作为esp8266的通信串口。串口1不需要开启中断，串口2需要开启中断，并且该项目使用空闲中断+接收的DMA的方式。<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/62df4039222344f48e3ae104895b0896.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/e6c8602e694a445e96db006775043ec9.png" alt="在这里插入图片描述"><br>开启usart2的中端<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/64a05ff1b226498ab34c0b1d05c971cc.png" alt="在这里插入图片描述"><br>开启接收的DMA方式<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/d83a359704fb4fb8bbf7f7e303fd9e5c.png" alt="在这里插入图片描述"><br>3、cubemx的配置结束，需要加功能的自己添加，这里只是一个最简单的工程。<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/4bcabacf1fdd43ada294517f07fb4813.png" alt="在这里插入图片描述"><br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/0f7b7f0b38c243e4846746fb93a8e945.png" alt="在这里插入图片描述"></p><h2 id="三、esp8266的接收和发送"><a href="#三、esp8266的接收和发送" class="headerlink" title="三、esp8266的接收和发送"></a>三、esp8266的接收和发送</h2><p><em><strong>对应一些基础知识和基本的使用，c语言知识我这里就不会做更多的介绍了。另外我们四利用cubemx创建的工程，我们最好按照他的格式去写代码。</strong></em></p><h3 id="1、printf"><a href="#1、printf" class="headerlink" title="1、printf"></a>1、printf</h3><p>添加printf打印的支持，方便我们的调试，在usart.h文件中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> import(__use_no_semihosting)</span></span><br><span class="line"><span class="comment">//标准库需要的支持函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> handle;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">FILE __stdout;</span><br><span class="line"><span class="comment">//定义_sys_exit()以避免使用半主机模式</span></span><br><span class="line"><span class="type">void</span> _sys_exit(<span class="type">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">    x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重定义fputc函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>((USART1-&gt;SR &amp; <span class="number">0X40</span>) == <span class="number">0</span>); <span class="comment">//循环发送,直到发送完毕</span></span><br><span class="line">    USART1-&gt;DR = (<span class="type">uint8_t</span>) ch;</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="2、串口2的DMA接收中断"><a href="#2、串口2的DMA接收中断" class="headerlink" title="2、串口2的DMA接收中断"></a>2、串口2的DMA接收中断</h3><p>这里也是稍微提及一下，如果想要更深入的了解，请看我写的另一篇 <a href="https://blog.csdn.net/weixin_51593470/article/details/130886157">STM32F407的串口接收不定长数据两种方式HAL库</a>。<br>在这个阶段，<strong>我们需要定义一个数组，这个数组用来接收wifi给我们发送的数据，</strong>大家可以我一样起同一个名字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">USART2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART2_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART2_IRQn 0 */</span></span><br><span class="line">  HAL_UART_IRQHandler(&amp;huart2);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART2_IRQn 1 */</span></span><br><span class="line">  <span class="keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart2,UART_FLAG_IDLE) != RESET)    <span class="comment">// 空闲中断的标志位</span></span><br><span class="line">  &#123;</span><br><span class="line">    HAL_UART_DMAStop(&amp;huart2);                               <span class="comment">//停止接收</span></span><br><span class="line">    esp_cnt = ESPBUFF_MAX_SIZE - __HAL_DMA_GET_COUNTER(&amp;hdma_usart2_rx);    <span class="comment">// 计算接收的数据长度</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart1,esp_buff,esp_cnt,<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//  printf(&quot;rec = %s\r\n&quot;,esp_buff);</span></span><br><span class="line">    HAL_UART_Receive_DMA(&amp;huart2,esp_buff,ESPBUFF_MAX_SIZE);         <span class="comment">// 开启DMA继续接收</span></span><br><span class="line">    __HAL_UART_CLEAR_IDLEFLAG(&amp;huart2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END USART2_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/8f071a9d1d26433da0115af1e55357c9.png" alt="在这里插入图片描述"></p><h3 id="3、esp8266的函数方法"><a href="#3、esp8266的函数方法" class="headerlink" title="3、esp8266的函数方法"></a>3、esp8266的函数方法</h3><p>esp8266的发送函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ESP8266_SendString</span><span class="params">(<span class="type">uint8_t</span> *str,<span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">USART2-&gt;DR = *str;</span><br><span class="line">str++;</span><br><span class="line">HAL_Delay(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">ESP8266_SendCmd</span><span class="params">(<span class="type">uint8_t</span> *cmd,<span class="type">uint8_t</span> *res)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> num = <span class="number">200</span>;</span><br><span class="line">ESP8266_Clear();</span><br><span class="line"><span class="comment">// 发送指令</span></span><br><span class="line">ESP8266_SendString(cmd,<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)cmd));</span><br><span class="line"><span class="keyword">while</span>(num--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>((<span class="type">const</span> <span class="type">char</span>*)esp_buff,(<span class="type">const</span> <span class="type">char</span> *)res)!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ESP8266_Clear();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>初始化<br>我们是在这里开启dma的接收的，还有空闲中断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  WIFI_NAME   <span class="string">&quot;m_phone&quot;</span>       <span class="comment">// wifi名</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  WIFI_PASS<span class="string">&quot;123456678&quot;</span><span class="comment">// wifi密码</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ESP8266_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Receive_DMA(&amp;huart2,esp_buff,ESPBUFF_MAX_SIZE);    <span class="comment">// 开启DMA接收</span></span><br><span class="line">__HAL_UART_ENABLE_IT(&amp;huart2,UART_IT_IDLE);      <span class="comment">// 开启串口的空闲中断</span></span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+RST\r\n&quot;</span>, <span class="string">&quot;ready&quot;</span>))</span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+CWMODE=1\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line"><span class="comment">//加入wifi热点</span></span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+CWJAP=\&quot;&quot;</span>WIFI_NAME<span class="string">&quot;\&quot;,\&quot;&quot;</span>WIFI_PASS<span class="string">&quot;\&quot;\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清空esp8266的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ESP8266_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(esp_buff,<span class="number">0</span>,<span class="keyword">sizeof</span>(esp_buff));</span><br><span class="line">esp_cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、连接阿里云"><a href="#四、连接阿里云" class="headerlink" title="四、连接阿里云"></a>四、连接阿里云</h2><p>1、通过上面的操作我们可以连接wifi热点，后面我们将连接阿里云。<br><em><strong>在第二点中我们创建了一个设备，里面提供了连接用到的MQTT参数。<br>根据这个更改对应的信息，用我提供的是连接不上的，我更改了。</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ALI_USERNAME<span class="string">&quot;stm32&amp;ix25oHiHCSl&quot;</span>                                         <span class="comment">// 用户名</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALICLIENTLD<span class="string">&quot;ix25oHiHCSl.stm32|securemode=2\\,signmethod=hmasha256\\,timestamp=1688993186406|&quot;</span><span class="comment">// 客户id</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALI_PASSWD<span class="string">&quot;08d7d8eb8bf44a452813fe04194cdb3b2d6b5ec58accfd115878efb403d0144a9&quot;</span>           <span class="comment">// MQTT 密码</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALI_MQTT_HOSTURL<span class="string">&quot;iot-06z00b14nanp9ew.mqtt.iothub.aliyuncs.com&quot;</span><span class="comment">// mqtt连接的网址</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALI_PORT<span class="string">&quot;1883&quot;</span><span class="comment">// 端口</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>      ALI_TOPIC_SET          <span class="string">&quot;/sys/ix25aHqHCSl/stm32/thing/service/property/set&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>      ALI_TOPIC_POST         <span class="string">&quot;/sys/ix25aHqHCSl/stm32/thing/event/property/post&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Ali_Yun_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设置用户名，密码</span></span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+MQTTUSERCFG=0,1,\&quot;NULL\&quot;,\&quot;&quot;</span>ALI_USERNAME<span class="string">&quot;\&quot;,\&quot;&quot;</span>ALI_PASSWD<span class="string">&quot;\&quot;,0,0,\&quot;\&quot;\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 设置客服id</span></span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+MQTTCLIENTID=0,\&quot;&quot;</span>ALICLIENTLD<span class="string">&quot;\&quot;\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接腾讯云  AT+MQTTCONN=0,&quot;iot-06z00b28nanp9ew.mqtt.iothub.aliyuncs.com&quot;,1883,1</span></span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+MQTTCONN=0,\&quot;&quot;</span>ALI_MQTT_HOSTUR<span class="string">L&quot;\&quot;,1883,1\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line"></span><br><span class="line">Ali_Yun_Topic();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Ali_Yun_Topic</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//&quot;AT+MQTTPUB=0,\&quot;发布的主题\&quot;,\&quot;&quot;;</span></span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+MQTTSUB=0,\&quot;&quot;</span>ALI_TOPIC_SET<span class="string">&quot;\&quot;,0\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ESP8266_SendCmd(<span class="string">&quot;AT+MQTTSUB=0,\&quot;&quot;</span>ALI_TOPIC_POST<span class="string">&quot;\&quot;,0\r\n&quot;</span>,<span class="string">&quot;OK&quot;</span>))&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，订阅和发布的主题都是不一样的，要根据自己的设备进行更改。<br><img src="/2023/10/19/%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%EF%BC%88%E6%9C%80%E8%AF%A6%E7%BB%86-%E5%8F%AF%E7%A7%BB%E6%A4%8D%EF%BC%89%E6%95%99%E7%A8%8B/db0419daa2504beeb60bc1b952f17060.png" alt="在这里插入图片描述"></p><h2 id="五、数据上报和数据解析"><a href="#五、数据上报和数据解析" class="headerlink" title="五、数据上报和数据解析"></a>五、数据上报和数据解析</h2><p>对于发送和阿里云下发的数据都是一个json格式<br>发送的格式：<br>AT+MQTTPUB&#x3D;0,”&#x2F;sys&#x2F;ix25oHiHCSl&#x2F;stm32&#x2F;thing&#x2F;event&#x2F;property&#x2F;post”,”{&quot;params&quot;:{&quot;temperature&quot;:1,&quot;Humidity&quot;:1},&quot;version&quot;:&quot;1.0.0&quot;}”,0,0<br>接收数据的格式：<br>+MQTTSUBRECV:0,”&#x2F;sys&#x2F;ix25oHiHCSl&#x2F;stm32&#x2F;thing&#x2F;service&#x2F;property&#x2F;set”,121,{“method”:”thing.service.property.set”,”id”:”1469885784”,”params”:{“Humidity”:45.3,”temperature”:25.5},”version”:”1.0.0”}<br>所以我们主要是对数据进行组装和解析<br>我们这里用到了cJSON，这是一个开源的项目，大家可以自己在网上找一下，可以在网盘中下载，就一个cJSON.h和一个cJSON.c两个文件。</p><h3 id="1、发送数据"><a href="#1、发送数据" class="headerlink" title="1、发送数据"></a>1、发送数据</h3><p>我们是模拟了两个数据，temp_value、humi_value，大家可以把自己想要的数据上传</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阿里云数据上传</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Ali_Yun_Send</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> msg_buf[<span class="number">1024</span>];</span><br><span class="line"><span class="type">uint8_t</span> params_buf[<span class="number">1024</span>];</span><br><span class="line"><span class="type">uint8_t</span> data_value_buf[<span class="number">24</span>];</span><br><span class="line"><span class="type">uint16_t</span> move_num = <span class="number">0</span>;</span><br><span class="line">cJSON *send_cjson = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str = %p\r\n&quot;</span>,&amp;str);</span><br><span class="line"></span><br><span class="line">cJSON *params_cjson = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(msg_buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg_buf));</span><br><span class="line"><span class="built_in">memset</span>(params_buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(params_buf));</span><br><span class="line"><span class="built_in">memset</span>(data_value_buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(data_value_buf));</span><br><span class="line"><span class="comment">// &quot;&#123;\\\&quot;params\\\&quot;:&#123;\\\&quot;temperature\\\&quot;:%f\\,\\\&quot;Humidity\\\&quot;:%f\\&#125;\\,\\\&quot;version\\\&quot;:\\\&quot;1.0.0\\\&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">send_cjson = cJSON_CreateObject();   <span class="comment">// 创建cjson</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建发送的json</span></span><br><span class="line">params_cjson = cJSON_CreateObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">//============================================== 发送的数据================================================</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;cjson发送数据 temp_value = %f\r\n&quot;</span>,temp_value);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;cjson发送数据 humi_value = %f\r\n&quot;</span>,humi_value);</span><br><span class="line"></span><br><span class="line">cJSON_AddNumberToObject(params_cjson,<span class="string">&quot;temperature&quot;</span>,temp_value++);</span><br><span class="line">cJSON_AddNumberToObject(params_cjson,<span class="string">&quot;Humidity&quot;</span>,humi_value++);</span><br><span class="line"></span><br><span class="line"><span class="comment">//============================================== 发送的数据================================================</span></span><br><span class="line"><span class="comment">// 加入主的json数据中</span></span><br><span class="line">cJSON_AddItemToObject(send_cjson, <span class="string">&quot;params&quot;</span>, params_cjson);</span><br><span class="line">cJSON_AddItemToObject(send_cjson,<span class="string">&quot;version&quot;</span>,cJSON_CreateString(<span class="string">&quot;1.0.0&quot;</span>));</span><br><span class="line">str = cJSON_PrintUnformatted(send_cjson);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;json格式 = %s\r\n&quot;</span>,str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加转义字符</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;*str!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">params_buf[i] = *str;</span><br><span class="line"><span class="keyword">if</span>(*(str+<span class="number">1</span>)==<span class="string">&#x27;&quot;&#x27;</span>||*(str+<span class="number">1</span>)==<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">params_buf[++i] = <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">str++;</span><br><span class="line">move_num++;</span><br><span class="line">&#125;</span><br><span class="line">str = str - move_num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;params_buf = %s\r\n&quot;</span>,params_buf);</span><br><span class="line"><span class="comment">// 整理所有数据</span></span><br><span class="line"><span class="built_in">sprintf</span>((<span class="type">char</span> *)msg_buf,<span class="string">&quot;AT+MQTTPUB=0,\&quot;&quot;</span>ALI_TOPIC_POST<span class="string">&quot;\&quot;,\&quot;%s\&quot;,0,0\r\n&quot;</span>,params_buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;开始发送数据:%s\r\n&quot;</span>,msg_buf);</span><br><span class="line">ESP8266_SendCmd(msg_buf,<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">ESP8266_Clear();</span><br><span class="line">cJSON_Delete(send_cjson);</span><br><span class="line"><span class="keyword">if</span>(str!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">free</span>(str);</span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;释放str空间成功\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是利用cjson的对象，组装成一个json格式，但是我们在用at指令发送的时候是要有 ‘\‘这个字符的，所以我们将数据进行了第二次的处理。<strong>这里注意要对cjson和str的内存进行释放。不然会出很多问题</strong>。</p><h3 id="2、数据的解析"><a href="#2、数据的解析" class="headerlink" title="2、数据的解析"></a>2、数据的解析</h3><p>这里也是对温度和湿度进行解析，需要解析别的也可以自己添加，主要是对cjson的函数使用。如果有必要我后面出一个对cjson的使用文章，主要是cjson的内存释放问题，比较麻烦，我被这个搞了好久。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> cjson_err_num = <span class="number">0</span>;  <span class="comment">//cjson 解析错误的次数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Ali_Yun_GetRCV</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">cJSON *cjson = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">char</span> topic_buff[<span class="number">256</span>];</span><br><span class="line"><span class="type">char</span> recv_buffer[ESPBUFF_MAX_SIZE];</span><br><span class="line"><span class="type">char</span> *ptr_recv = <span class="built_in">strstr</span>((<span class="type">const</span> <span class="type">char</span> *)esp_buff,<span class="string">&quot;+MQTTSUBRECV&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;/sys/ix25oHiHCSl/stm32/thing/service/property/set&quot;</span></span><br><span class="line"><span class="keyword">if</span>(ptr_recv!=<span class="literal">NULL</span>)  <span class="comment">// 存在</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(topic_buff,<span class="number">0</span>,<span class="keyword">sizeof</span>(topic_buff));</span><br><span class="line"><span class="built_in">sscanf</span>((<span class="type">char</span> *)esp_buff,<span class="string">&quot;+MQTTSUBRECV:0,%[^,],%d,%s&quot;</span>,topic_buff,&amp;num,recv_buffer);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>(topic_buff,ALI_TOPIC_SET))      <span class="comment">// 判断主题</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;========================数据解析开始===========================\r\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;接收数据成功，开始解析  %s\r\n&quot;</span>,recv_buffer);</span><br><span class="line">cjson = cJSON_Parse(recv_buffer);</span><br><span class="line"><span class="keyword">if</span>(cjson==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;cjson 解析错误\r\n&quot;</span>);</span><br><span class="line">cjson_err_num++;</span><br><span class="line"><span class="keyword">if</span>(cjson_err_num&gt;<span class="number">3</span>)&#123;</span><br><span class="line">ESP8266_Clear();</span><br><span class="line">cjson_err_num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;========================数据解析失败===========================\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cJSON *json_data = <span class="literal">NULL</span>;</span><br><span class="line">json_data = cJSON_GetObjectItem(cjson,<span class="string">&quot;params&quot;</span>);</span><br><span class="line">cjson_err_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(json_data==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;cjson  没有数据\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;cjson 内存大小为 = %d\r\n&quot;</span>,<span class="keyword">sizeof</span>(cjson));</span><br><span class="line"><span class="comment">//printf(&quot;数据接收：%s\r\n&quot;,esp_buff);</span></span><br><span class="line"><span class="comment">// ====================================解析数据=========================================</span></span><br><span class="line"><span class="keyword">if</span>(cJSON_GetObjectItem(json_data,<span class="string">&quot;temperature&quot;</span>)!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp_value = cJSON_GetObjectItem(json_data,<span class="string">&quot;temperature&quot;</span>)-&gt;valuedouble;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;csjon解析成功 temp_value = %f\r\n&quot;</span>,temp_value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cJSON_GetObjectItem(json_data,<span class="string">&quot;Humidity&quot;</span>)!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">humi_value = cJSON_GetObjectItem(json_data,<span class="string">&quot;Humidity&quot;</span>)-&gt;valuedouble;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;csjon解析成功 Humidity = %f\r\n&quot;</span>,humi_value);</span><br><span class="line">&#125;<span class="comment">//======================================================================================</span></span><br><span class="line">&#125;</span><br><span class="line">ESP8266_Clear();</span><br><span class="line">cJSON_Delete(cjson);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;========================数据解析成功===========================\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该方法是利用了sscanf对每一个部分进行分割，取到json格式的部分，交给cjson解析，主要还是注意内存泄漏的问题。</p><h2 id="六、主函数"><a href="#六、主函数" class="headerlink" title="六、主函数"></a>六、主函数</h2><p>因为c8t6资源本来就少，所以我们这里并没有用到定时器，利用标志位大概取一个时间循环发送数据，对于判断接收标志位的判断也是可以丢到while循环，因为我们对espbuff的清理都是在处理了数组之后再去清空的，所以一般情况是不会造成数据没有接收到的情况。这个发送数据的时间，大家可以利用定时器，我这边就不加了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">uint16_t</span> time = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_DMA_Init();</span><br><span class="line">  MX_USART1_UART_Init();</span><br><span class="line">  MX_USART2_UART_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  ESP8266_Init();</span><br><span class="line">  Ali_Yun_Init();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  time++;</span><br><span class="line">  <span class="keyword">if</span>(time&gt;<span class="number">1000</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  Ali_Yun_Send();   <span class="comment">// 上传数据</span></span><br><span class="line">  time = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">  Ali_Yun_GetRCV();</span><br><span class="line">  HAL_Delay(<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总的来说这个项目还是比较简单，适合新手对串口通信进一步了解。<br>第一次写这种文章，请多多指教吧！谢谢！<br><a href="https://download.csdn.net/download/weixin_51593470/88123222">源码下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
